// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	pflag "github.com/spf13/pflag"
	mock "github.com/stretchr/testify/mock"
)

// FlagSetInterfaceMockery is an autogenerated mock type for the FlagSetInterfaceMockery type
type FlagSetInterfaceMockery struct {
	mock.Mock
}

// GetBoolAutoWithdraw provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetBoolAutoWithdraw(_a0 *pflag.FlagSet) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFloat32GasLimit provides a mock function with given fields: set
func (_m *FlagSetInterfaceMockery) GetFloat32GasLimit(set *pflag.FlagSet) (float32, error) {
	ret := _m.Called(set)

	var r0 float32
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) float32); ok {
		r0 = rf(set)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(set)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFloat32GasMultiplier provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetFloat32GasMultiplier(_a0 *pflag.FlagSet) (float32, error) {
	ret := _m.Called(_a0)

	var r0 float32
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) float32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInt32Buffer provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetInt32Buffer(_a0 *pflag.FlagSet) (int32, error) {
	ret := _m.Called(_a0)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) int32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInt32GasPrice provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetInt32GasPrice(_a0 *pflag.FlagSet) (int32, error) {
	ret := _m.Called(_a0)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) int32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInt32Wait provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetInt32Wait(_a0 *pflag.FlagSet) (int32, error) {
	ret := _m.Called(_a0)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) int32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootFloat32GasLimit provides a mock function with given fields:
func (_m *FlagSetInterfaceMockery) GetRootFloat32GasLimit() (float32, error) {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootFloat32GasMultiplier provides a mock function with given fields:
func (_m *FlagSetInterfaceMockery) GetRootFloat32GasMultiplier() (float32, error) {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootInt32Buffer provides a mock function with given fields:
func (_m *FlagSetInterfaceMockery) GetRootInt32Buffer() (int32, error) {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootInt32GasPrice provides a mock function with given fields:
func (_m *FlagSetInterfaceMockery) GetRootInt32GasPrice() (int32, error) {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootInt32Wait provides a mock function with given fields:
func (_m *FlagSetInterfaceMockery) GetRootInt32Wait() (int32, error) {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootStringLogLevel provides a mock function with given fields:
func (_m *FlagSetInterfaceMockery) GetRootStringLogLevel() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRootStringProvider provides a mock function with given fields:
func (_m *FlagSetInterfaceMockery) GetRootStringProvider() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStringLogLevel provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetStringLogLevel(_a0 *pflag.FlagSet) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStringProvider provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetStringProvider(_a0 *pflag.FlagSet) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUint32BountyId provides a mock function with given fields: _a0
func (_m *FlagSetInterfaceMockery) GetUint32BountyId(_a0 *pflag.FlagSet) (uint32, error) {
	ret := _m.Called(_a0)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) uint32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

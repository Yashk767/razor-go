// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	accounts "github.com/ethereum/go-ethereum/accounts"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	bindings "razor/pkg/bindings"

	client "razor/client"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	pflag "github.com/spf13/pflag"

	types "razor/core/types"
)

// UtilsCmdInterface is an autogenerated mock type for the UtilsCmdInterface type
type UtilsCmdInterface struct {
	mock.Mock
}

// Approve provides a mock function with given fields: txnArgs
func (_m *UtilsCmdInterface) Approve(txnArgs types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(txnArgs)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) (common.Hash, error)); ok {
		return rf(txnArgs)
	}
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) common.Hash); ok {
		r0 = rf(txnArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(types.TransactionOptions) error); ok {
		r1 = rf(txnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApproveUnstake provides a mock function with given fields: _a0, stakerTokenAddress, txnArgs
func (_m *UtilsCmdInterface) ApproveUnstake(_a0 *ethclient.Client, stakerTokenAddress common.Address, txnArgs types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(_a0, stakerTokenAddress, txnArgs)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address, types.TransactionOptions) (common.Hash, error)); ok {
		return rf(_a0, stakerTokenAddress, txnArgs)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address, types.TransactionOptions) common.Hash); ok {
		r0 = rf(_a0, stakerTokenAddress, txnArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, common.Address, types.TransactionOptions) error); ok {
		r1 = rf(_a0, stakerTokenAddress, txnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignAmountInWei provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) AssignAmountInWei(flagSet *pflag.FlagSet) (*big.Int, error) {
	ret := _m.Called(flagSet)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) (*big.Int, error)); ok {
		return rf(flagSet)
	}
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) *big.Int); ok {
		r0 = rf(flagSet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(flagSet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateSecret provides a mock function with given fields: account, epoch, keystorePath, chainId
func (_m *UtilsCmdInterface) CalculateSecret(account types.Account, epoch uint32, keystorePath string, chainId *big.Int) ([]byte, []byte, error) {
	ret := _m.Called(account, epoch, keystorePath, chainId)

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Account, uint32, string, *big.Int) ([]byte, []byte, error)); ok {
		return rf(account, epoch, keystorePath, chainId)
	}
	if rf, ok := ret.Get(0).(func(types.Account, uint32, string, *big.Int) []byte); ok {
		r0 = rf(account, epoch, keystorePath, chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Account, uint32, string, *big.Int) []byte); ok {
		r1 = rf(account, epoch, keystorePath, chainId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(types.Account, uint32, string, *big.Int) error); ok {
		r2 = rf(account, epoch, keystorePath, chainId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckCurrentStatus provides a mock function with given fields: _a0, collectionId
func (_m *UtilsCmdInterface) CheckCurrentStatus(_a0 *ethclient.Client, collectionId uint16) (bool, error) {
	ret := _m.Called(_a0, collectionId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16) (bool, error)); ok {
		return rf(_a0, collectionId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16) bool); ok {
		r0 = rf(_a0, collectionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint16) error); ok {
		r1 = rf(_a0, collectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckDisputeForIds provides a mock function with given fields: _a0, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds
func (_m *UtilsCmdInterface) CheckDisputeForIds(_a0 *ethclient.Client, transactionOpts types.TransactionOptions, epoch uint32, blockIndex uint8, idsInProposedBlock []uint16, revealedCollectionIds []uint16) (*coretypes.Transaction, error) {
	ret := _m.Called(_a0, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)

	var r0 *coretypes.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.TransactionOptions, uint32, uint8, []uint16, []uint16) (*coretypes.Transaction, error)); ok {
		return rf(_a0, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.TransactionOptions, uint32, uint8, []uint16, []uint16) *coretypes.Transaction); ok {
		r0 = rf(_a0, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.TransactionOptions, uint32, uint8, []uint16, []uint16) error); ok {
		r1 = rf(_a0, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckForLastCommitted provides a mock function with given fields: _a0, staker, epoch
func (_m *UtilsCmdInterface) CheckForLastCommitted(_a0 *ethclient.Client, staker bindings.StructsStaker, epoch uint32) error {
	ret := _m.Called(_a0, staker, epoch)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, bindings.StructsStaker, uint32) error); ok {
		r0 = rf(_a0, staker, epoch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckToDoResetDispute provides a mock function with given fields: _a0, blockManager, txnOpts, epoch, sortedValues
func (_m *UtilsCmdInterface) CheckToDoResetDispute(_a0 *ethclient.Client, blockManager *bindings.BlockManager, txnOpts *bind.TransactOpts, epoch uint32, sortedValues []*big.Int) {
	_m.Called(_a0, blockManager, txnOpts, epoch, sortedValues)
}

// ClaimBlockReward provides a mock function with given fields: options
func (_m *UtilsCmdInterface) ClaimBlockReward(options types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(options)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) (common.Hash, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) common.Hash); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(types.TransactionOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimBounty provides a mock function with given fields: config, _a1, redeemBountyInput
func (_m *UtilsCmdInterface) ClaimBounty(config types.Configurations, _a1 *ethclient.Client, redeemBountyInput types.RedeemBountyInput) (common.Hash, error) {
	ret := _m.Called(config, _a1, redeemBountyInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.RedeemBountyInput) (common.Hash, error)); ok {
		return rf(config, _a1, redeemBountyInput)
	}
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.RedeemBountyInput) common.Hash); ok {
		r0 = rf(config, _a1, redeemBountyInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Configurations, *ethclient.Client, types.RedeemBountyInput) error); ok {
		r1 = rf(config, _a1, redeemBountyInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimCommission provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ClaimCommission(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// Commit provides a mock function with given fields: _a0, config, account, epoch, seed, values
func (_m *UtilsCmdInterface) Commit(_a0 *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, seed []byte, values []*big.Int) (common.Hash, error) {
	ret := _m.Called(_a0, config, account, epoch, seed, values)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, []byte, []*big.Int) (common.Hash, error)); ok {
		return rf(_a0, config, account, epoch, seed, values)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, []byte, []*big.Int) common.Hash); ok {
		r0 = rf(_a0, config, account, epoch, seed, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.Account, uint32, []byte, []*big.Int) error); ok {
		r1 = rf(_a0, config, account, epoch, seed, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContractAddresses provides a mock function with given fields:
func (_m *UtilsCmdInterface) ContractAddresses() {
	_m.Called()
}

// Create provides a mock function with given fields: password
func (_m *UtilsCmdInterface) Create(password string) (accounts.Account, error) {
	ret := _m.Called(password)

	var r0 accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (accounts.Account, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) accounts.Account); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCollection provides a mock function with given fields: _a0, config, collectionInput
func (_m *UtilsCmdInterface) CreateCollection(_a0 *ethclient.Client, config types.Configurations, collectionInput types.CreateCollectionInput) (common.Hash, error) {
	ret := _m.Called(_a0, config, collectionInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput) (common.Hash, error)); ok {
		return rf(_a0, config, collectionInput)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput) common.Hash); ok {
		r0 = rf(_a0, config, collectionInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput) error); ok {
		r1 = rf(_a0, config, collectionInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: _a0, config, jobInput
func (_m *UtilsCmdInterface) CreateJob(_a0 *ethclient.Client, config types.Configurations, jobInput types.CreateJobInput) (common.Hash, error) {
	ret := _m.Called(_a0, config, jobInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateJobInput) (common.Hash, error)); ok {
		return rf(_a0, config, jobInput)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateJobInput) common.Hash); ok {
		r0 = rf(_a0, config, jobInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateJobInput) error); ok {
		r1 = rf(_a0, config, jobInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delegate provides a mock function with given fields: txnArgs, stakerId
func (_m *UtilsCmdInterface) Delegate(txnArgs types.TransactionOptions, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(txnArgs, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(types.TransactionOptions, uint32) (common.Hash, error)); ok {
		return rf(txnArgs, stakerId)
	}
	if rf, ok := ret.Get(0).(func(types.TransactionOptions, uint32) common.Hash); ok {
		r0 = rf(txnArgs, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(types.TransactionOptions, uint32) error); ok {
		r1 = rf(txnArgs, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dispute provides a mock function with given fields: _a0, config, account, epoch, blockIndex, proposedBlock, leafId, sortedValues
func (_m *UtilsCmdInterface) Dispute(_a0 *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, blockIndex uint8, proposedBlock bindings.StructsBlock, leafId uint16, sortedValues []*big.Int) error {
	ret := _m.Called(_a0, config, account, epoch, blockIndex, proposedBlock, leafId, sortedValues)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, uint8, bindings.StructsBlock, uint16, []*big.Int) error); ok {
		r0 = rf(_a0, config, account, epoch, blockIndex, proposedBlock, leafId, sortedValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteClaimBounty provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteClaimBounty(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCollectionList provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCollectionList(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteContractAddresses provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteContractAddresses(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCreate provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCreate(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCreateCollection provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCreateCollection(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCreateJob provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCreateJob(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteDelegate provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteDelegate(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteExtendLock provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteExtendLock(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteImport provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteImport(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteInitiateWithdraw provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteInitiateWithdraw(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteJobList provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteJobList(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteListAccounts provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteListAccounts(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteModifyCollectionStatus provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteModifyCollectionStatus(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteSetDelegation provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteSetDelegation(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteStake provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteStake(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteStakerinfo provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteStakerinfo(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteTransfer provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteTransfer(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUnlockWithdraw provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUnlockWithdraw(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUnstake provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUnstake(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUpdateCollection provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUpdateCollection(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUpdateCommission provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUpdateCommission(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUpdateJob provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUpdateJob(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteVote provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteVote(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// GenerateTreeRevealData provides a mock function with given fields: merkleTree, commitData
func (_m *UtilsCmdInterface) GenerateTreeRevealData(merkleTree [][][]byte, commitData types.CommitData) bindings.StructsMerkleTree {
	ret := _m.Called(merkleTree, commitData)

	var r0 bindings.StructsMerkleTree
	if rf, ok := ret.Get(0).(func([][][]byte, types.CommitData) bindings.StructsMerkleTree); ok {
		r0 = rf(merkleTree, commitData)
	} else {
		r0 = ret.Get(0).(bindings.StructsMerkleTree)
	}

	return r0
}

// GetAlternateProvider provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetAlternateProvider() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBiggestStakeAndId provides a mock function with given fields: _a0, address, epoch
func (_m *UtilsCmdInterface) GetBiggestStakeAndId(_a0 *ethclient.Client, address string, epoch uint32) (*big.Int, uint32, error) {
	ret := _m.Called(_a0, address, epoch)

	var r0 *big.Int
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string, uint32) (*big.Int, uint32, error)); ok {
		return rf(_a0, address, epoch)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string, uint32) *big.Int); ok {
		r0 = rf(_a0, address, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, string, uint32) uint32); ok {
		r1 = rf(_a0, address, epoch)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(*ethclient.Client, string, uint32) error); ok {
		r2 = rf(_a0, address, epoch)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBountyIdFromEvents provides a mock function with given fields: _a0, blockNumber, bountyHunter
func (_m *UtilsCmdInterface) GetBountyIdFromEvents(_a0 *ethclient.Client, blockNumber *big.Int, bountyHunter string) (uint32, error) {
	ret := _m.Called(_a0, blockNumber, bountyHunter)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, string) (uint32, error)); ok {
		return rf(_a0, blockNumber, bountyHunter)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, string) uint32); ok {
		r0 = rf(_a0, blockNumber, bountyHunter)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, string) error); ok {
		r1 = rf(_a0, blockNumber, bountyHunter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBufferPercent provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetBufferPercent() (int32, error) {
	ret := _m.Called()

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIdPositionInBlock provides a mock function with given fields: _a0, leafId, proposedBlock
func (_m *UtilsCmdInterface) GetCollectionIdPositionInBlock(_a0 *ethclient.Client, leafId uint16, proposedBlock bindings.StructsBlock) *big.Int {
	ret := _m.Called(_a0, leafId, proposedBlock)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16, bindings.StructsBlock) *big.Int); ok {
		r0 = rf(_a0, leafId, proposedBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetCollectionList provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetCollectionList(_a0 *ethclient.Client) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigData provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetConfigData() (types.Configurations, error) {
	ret := _m.Called()

	var r0 types.Configurations
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.Configurations, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.Configurations); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Configurations)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochAndState provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetEpochAndState(_a0 *ethclient.Client) (uint32, int64, error) {
	ret := _m.Called(_a0)

	var r0 uint32
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (uint32, int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) int64); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(*ethclient.Client) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGasLimit provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasLimit() (float32, error) {
	ret := _m.Called()

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func() (float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasLimitOverride provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasLimitOverride() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPrice provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasPrice() (int32, error) {
	ret := _m.Called()

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHTTPTimeout provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetHTTPTimeout() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIteration provides a mock function with given fields: _a0, proposer, bufferPercent
func (_m *UtilsCmdInterface) GetIteration(_a0 *ethclient.Client, proposer types.ElectedProposer, bufferPercent int32) int {
	ret := _m.Called(_a0, proposer, bufferPercent)

	var r0 int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.ElectedProposer, int32) int); ok {
		r0 = rf(_a0, proposer, bufferPercent)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetJobList provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetJobList(_a0 *ethclient.Client) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLocalMediansData provides a mock function with given fields: _a0, account, epoch, blockNumber, rogueData
func (_m *UtilsCmdInterface) GetLocalMediansData(_a0 *ethclient.Client, account types.Account, epoch uint32, blockNumber *big.Int, rogueData types.Rogue) (types.ProposeFileData, error) {
	ret := _m.Called(_a0, account, epoch, blockNumber, rogueData)

	var r0 types.ProposeFileData
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, uint32, *big.Int, types.Rogue) (types.ProposeFileData, error)); ok {
		return rf(_a0, account, epoch, blockNumber, rogueData)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, uint32, *big.Int, types.Rogue) types.ProposeFileData); ok {
		r0 = rf(_a0, account, epoch, blockNumber, rogueData)
	} else {
		r0 = ret.Get(0).(types.ProposeFileData)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Account, uint32, *big.Int, types.Rogue) error); ok {
		r1 = rf(_a0, account, epoch, blockNumber, rogueData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogFileMaxAge provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogFileMaxAge() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogFileMaxBackups provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogFileMaxBackups() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogFileMaxSize provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogFileMaxSize() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogLevel provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogLevel() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplier provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetMultiplier() (float32, error) {
	ret := _m.Called()

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func() (float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvider provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetProvider() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRPCTimeout provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetRPCTimeout() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSalt provides a mock function with given fields: _a0, epoch
func (_m *UtilsCmdInterface) GetSalt(_a0 *ethclient.Client, epoch uint32) ([32]byte, error) {
	ret := _m.Called(_a0, epoch)

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) ([32]byte, error)); ok {
		return rf(_a0, epoch)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) [32]byte); ok {
		r0 = rf(_a0, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint32) error); ok {
		r1 = rf(_a0, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSmallestStakeAndId provides a mock function with given fields: _a0, epoch
func (_m *UtilsCmdInterface) GetSmallestStakeAndId(_a0 *ethclient.Client, epoch uint32) (*big.Int, uint32, error) {
	ret := _m.Called(_a0, epoch)

	var r0 *big.Int
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) (*big.Int, uint32, error)); ok {
		return rf(_a0, epoch)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) *big.Int); ok {
		r0 = rf(_a0, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint32) uint32); ok {
		r1 = rf(_a0, epoch)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(*ethclient.Client, uint32) error); ok {
		r2 = rf(_a0, epoch)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSortedRevealedValues provides a mock function with given fields: _a0, blockNumber, epoch
func (_m *UtilsCmdInterface) GetSortedRevealedValues(_a0 *ethclient.Client, blockNumber *big.Int, epoch uint32) (*types.RevealedDataMaps, error) {
	ret := _m.Called(_a0, blockNumber, epoch)

	var r0 *types.RevealedDataMaps
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32) (*types.RevealedDataMaps, error)); ok {
		return rf(_a0, blockNumber, epoch)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32) *types.RevealedDataMaps); ok {
		r0 = rf(_a0, blockNumber, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RevealedDataMaps)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, uint32) error); ok {
		r1 = rf(_a0, blockNumber, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakerInfo provides a mock function with given fields: _a0, stakerId
func (_m *UtilsCmdInterface) GetStakerInfo(_a0 *ethclient.Client, stakerId uint32) error {
	ret := _m.Called(_a0, stakerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) error); ok {
		r0 = rf(_a0, stakerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWaitTime provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetWaitTime() (int32, error) {
	ret := _m.Called()

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GiveSorted provides a mock function with given fields: _a0, blockManager, txnArgs, epoch, assetId, sortedStakers
func (_m *UtilsCmdInterface) GiveSorted(_a0 *ethclient.Client, blockManager *bindings.BlockManager, txnArgs types.TransactionOptions, epoch uint32, assetId uint16, sortedStakers []*big.Int) error {
	ret := _m.Called(_a0, blockManager, txnArgs, epoch, assetId, sortedStakers)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bindings.BlockManager, types.TransactionOptions, uint32, uint16, []*big.Int) error); ok {
		r0 = rf(_a0, blockManager, txnArgs, epoch, assetId, sortedStakers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleBlock provides a mock function with given fields: _a0, account, stakerId, blockNumber, config, httpClient, rogueData, backupNodeActionsToIgnore
func (_m *UtilsCmdInterface) HandleBlock(_a0 *ethclient.Client, account types.Account, stakerId uint32, blockNumber *big.Int, config types.Configurations, httpClient *client.HttpClient, rogueData types.Rogue, backupNodeActionsToIgnore []string) {
	_m.Called(_a0, account, stakerId, blockNumber, config, httpClient, rogueData, backupNodeActionsToIgnore)
}

// HandleClaimBounty provides a mock function with given fields: _a0, config, account
func (_m *UtilsCmdInterface) HandleClaimBounty(_a0 *ethclient.Client, config types.Configurations, account types.Account) error {
	ret := _m.Called(_a0, config, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account) error); ok {
		r0 = rf(_a0, config, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleCommitState provides a mock function with given fields: _a0, epoch, seed, httpClient, rogueData
func (_m *UtilsCmdInterface) HandleCommitState(_a0 *ethclient.Client, epoch uint32, seed []byte, httpClient *client.HttpClient, rogueData types.Rogue) (types.CommitData, error) {
	ret := _m.Called(_a0, epoch, seed, httpClient, rogueData)

	var r0 types.CommitData
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32, []byte, *client.HttpClient, types.Rogue) (types.CommitData, error)); ok {
		return rf(_a0, epoch, seed, httpClient, rogueData)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32, []byte, *client.HttpClient, types.Rogue) types.CommitData); ok {
		r0 = rf(_a0, epoch, seed, httpClient, rogueData)
	} else {
		r0 = ret.Get(0).(types.CommitData)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint32, []byte, *client.HttpClient, types.Rogue) error); ok {
		r1 = rf(_a0, epoch, seed, httpClient, rogueData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleDispute provides a mock function with given fields: _a0, config, account, epoch, blockNumber, rogueData, backupNodeActionsToIgnore
func (_m *UtilsCmdInterface) HandleDispute(_a0 *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, blockNumber *big.Int, rogueData types.Rogue, backupNodeActionsToIgnore []string) error {
	ret := _m.Called(_a0, config, account, epoch, blockNumber, rogueData, backupNodeActionsToIgnore)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, *big.Int, types.Rogue, []string) error); ok {
		r0 = rf(_a0, config, account, epoch, blockNumber, rogueData, backupNodeActionsToIgnore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleExit provides a mock function with given fields:
func (_m *UtilsCmdInterface) HandleExit() {
	_m.Called()
}

// HandleUnstakeLock provides a mock function with given fields: _a0, account, configurations, stakerId
func (_m *UtilsCmdInterface) HandleUnstakeLock(_a0 *ethclient.Client, account types.Account, configurations types.Configurations, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(_a0, account, configurations, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, types.Configurations, uint32) (common.Hash, error)); ok {
		return rf(_a0, account, configurations, stakerId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, types.Configurations, uint32) common.Hash); ok {
		r0 = rf(_a0, account, configurations, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Account, types.Configurations, uint32) error); ok {
		r1 = rf(_a0, account, configurations, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleWithdrawLock provides a mock function with given fields: _a0, account, configurations, stakerId
func (_m *UtilsCmdInterface) HandleWithdrawLock(_a0 *ethclient.Client, account types.Account, configurations types.Configurations, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(_a0, account, configurations, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, types.Configurations, uint32) (common.Hash, error)); ok {
		return rf(_a0, account, configurations, stakerId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, types.Configurations, uint32) common.Hash); ok {
		r0 = rf(_a0, account, configurations, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Account, types.Configurations, uint32) error); ok {
		r1 = rf(_a0, account, configurations, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportAccount provides a mock function with given fields:
func (_m *UtilsCmdInterface) ImportAccount() (accounts.Account, error) {
	ret := _m.Called()

	var r0 accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() (accounts.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() accounts.Account); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexRevealEventsOfCurrentEpoch provides a mock function with given fields: _a0, blockNumber, epoch
func (_m *UtilsCmdInterface) IndexRevealEventsOfCurrentEpoch(_a0 *ethclient.Client, blockNumber *big.Int, epoch uint32) ([]types.RevealedStruct, error) {
	ret := _m.Called(_a0, blockNumber, epoch)

	var r0 []types.RevealedStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32) ([]types.RevealedStruct, error)); ok {
		return rf(_a0, blockNumber, epoch)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32) []types.RevealedStruct); ok {
		r0 = rf(_a0, blockNumber, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RevealedStruct)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, uint32) error); ok {
		r1 = rf(_a0, blockNumber, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateCommit provides a mock function with given fields: _a0, config, account, epoch, stakerId, httpClient, rogueData
func (_m *UtilsCmdInterface) InitiateCommit(_a0 *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, stakerId uint32, httpClient *client.HttpClient, rogueData types.Rogue) error {
	ret := _m.Called(_a0, config, account, epoch, stakerId, httpClient, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, uint32, *client.HttpClient, types.Rogue) error); ok {
		r0 = rf(_a0, config, account, epoch, stakerId, httpClient, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiatePropose provides a mock function with given fields: _a0, config, account, epoch, staker, blockNumber, rogueData
func (_m *UtilsCmdInterface) InitiatePropose(_a0 *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, staker bindings.StructsStaker, blockNumber *big.Int, rogueData types.Rogue) error {
	ret := _m.Called(_a0, config, account, epoch, staker, blockNumber, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, bindings.StructsStaker, *big.Int, types.Rogue) error); ok {
		r0 = rf(_a0, config, account, epoch, staker, blockNumber, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateReveal provides a mock function with given fields: _a0, config, account, epoch, staker, rogueData
func (_m *UtilsCmdInterface) InitiateReveal(_a0 *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, staker bindings.StructsStaker, rogueData types.Rogue) error {
	ret := _m.Called(_a0, config, account, epoch, staker, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, bindings.StructsStaker, types.Rogue) error); ok {
		r0 = rf(_a0, config, account, epoch, staker, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateWithdraw provides a mock function with given fields: _a0, txnOpts, stakerId
func (_m *UtilsCmdInterface) InitiateWithdraw(_a0 *ethclient.Client, txnOpts *bind.TransactOpts, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(_a0, txnOpts, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32) (common.Hash, error)); ok {
		return rf(_a0, txnOpts, stakerId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32) common.Hash); ok {
		r0 = rf(_a0, txnOpts, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32) error); ok {
		r1 = rf(_a0, txnOpts, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsElectedProposer provides a mock function with given fields: proposer, currentStakerStake
func (_m *UtilsCmdInterface) IsElectedProposer(proposer types.ElectedProposer, currentStakerStake *big.Int) bool {
	ret := _m.Called(proposer, currentStakerStake)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.ElectedProposer, *big.Int) bool); ok {
		r0 = rf(proposer, currentStakerStake)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListAccounts provides a mock function with given fields:
func (_m *UtilsCmdInterface) ListAccounts() ([]accounts.Account, error) {
	ret := _m.Called()

	var r0 []accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]accounts.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []accounts.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeBlock provides a mock function with given fields: _a0, blockNumber, epoch, rogueData
func (_m *UtilsCmdInterface) MakeBlock(_a0 *ethclient.Client, blockNumber *big.Int, epoch uint32, rogueData types.Rogue) ([]*big.Int, []uint16, *types.RevealedDataMaps, error) {
	ret := _m.Called(_a0, blockNumber, epoch, rogueData)

	var r0 []*big.Int
	var r1 []uint16
	var r2 *types.RevealedDataMaps
	var r3 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) ([]*big.Int, []uint16, *types.RevealedDataMaps, error)); ok {
		return rf(_a0, blockNumber, epoch, rogueData)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) []*big.Int); ok {
		r0 = rf(_a0, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) []uint16); ok {
		r1 = rf(_a0, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uint16)
		}
	}

	if rf, ok := ret.Get(2).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) *types.RevealedDataMaps); ok {
		r2 = rf(_a0, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*types.RevealedDataMaps)
		}
	}

	if rf, ok := ret.Get(3).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) error); ok {
		r3 = rf(_a0, blockNumber, epoch, rogueData)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ModifyCollectionStatus provides a mock function with given fields: _a0, config, modifyCollectionInput
func (_m *UtilsCmdInterface) ModifyCollectionStatus(_a0 *ethclient.Client, config types.Configurations, modifyCollectionInput types.ModifyCollectionInput) (common.Hash, error) {
	ret := _m.Called(_a0, config, modifyCollectionInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.ModifyCollectionInput) (common.Hash, error)); ok {
		return rf(_a0, config, modifyCollectionInput)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.ModifyCollectionInput) common.Hash); ok {
		r0 = rf(_a0, config, modifyCollectionInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.ModifyCollectionInput) error); ok {
		r1 = rf(_a0, config, modifyCollectionInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Propose provides a mock function with given fields: _a0, config, account, staker, epoch, blockNumber, rogueData
func (_m *UtilsCmdInterface) Propose(_a0 *ethclient.Client, config types.Configurations, account types.Account, staker bindings.StructsStaker, epoch uint32, blockNumber *big.Int, rogueData types.Rogue) error {
	ret := _m.Called(_a0, config, account, staker, epoch, blockNumber, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, bindings.StructsStaker, uint32, *big.Int, types.Rogue) error); ok {
		r0 = rf(_a0, config, account, staker, epoch, blockNumber, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetDispute provides a mock function with given fields: _a0, blockManager, txnOpts, epoch
func (_m *UtilsCmdInterface) ResetDispute(_a0 *ethclient.Client, blockManager *bindings.BlockManager, txnOpts *bind.TransactOpts, epoch uint32) {
	_m.Called(_a0, blockManager, txnOpts, epoch)
}

// ResetUnstakeLock provides a mock function with given fields: _a0, config, extendLockInput
func (_m *UtilsCmdInterface) ResetUnstakeLock(_a0 *ethclient.Client, config types.Configurations, extendLockInput types.ExtendLockInput) (common.Hash, error) {
	ret := _m.Called(_a0, config, extendLockInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.ExtendLockInput) (common.Hash, error)); ok {
		return rf(_a0, config, extendLockInput)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.ExtendLockInput) common.Hash); ok {
		r0 = rf(_a0, config, extendLockInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.ExtendLockInput) error); ok {
		r1 = rf(_a0, config, extendLockInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reveal provides a mock function with given fields: _a0, config, account, epoch, commitData, signature
func (_m *UtilsCmdInterface) Reveal(_a0 *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, commitData types.CommitData, signature []byte) (common.Hash, error) {
	ret := _m.Called(_a0, config, account, epoch, commitData, signature)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, types.CommitData, []byte) (common.Hash, error)); ok {
		return rf(_a0, config, account, epoch, commitData, signature)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, types.CommitData, []byte) common.Hash); ok {
		r0 = rf(_a0, config, account, epoch, commitData, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.Account, uint32, types.CommitData, []byte) error); ok {
		r1 = rf(_a0, config, account, epoch, commitData, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfig provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) SetConfig(flagSet *pflag.FlagSet) error {
	ret := _m.Called(flagSet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) error); ok {
		r0 = rf(flagSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDelegation provides a mock function with given fields: _a0, config, delegationInput
func (_m *UtilsCmdInterface) SetDelegation(_a0 *ethclient.Client, config types.Configurations, delegationInput types.SetDelegationInput) (common.Hash, error) {
	ret := _m.Called(_a0, config, delegationInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.SetDelegationInput) (common.Hash, error)); ok {
		return rf(_a0, config, delegationInput)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.SetDelegationInput) common.Hash); ok {
		r0 = rf(_a0, config, delegationInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.SetDelegationInput) error); ok {
		r1 = rf(_a0, config, delegationInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakeCoins provides a mock function with given fields: txnArgs
func (_m *UtilsCmdInterface) StakeCoins(txnArgs types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(txnArgs)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) (common.Hash, error)); ok {
		return rf(txnArgs)
	}
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) common.Hash); ok {
		r0 = rf(txnArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(types.TransactionOptions) error); ok {
		r1 = rf(txnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreBountyId provides a mock function with given fields: _a0, account
func (_m *UtilsCmdInterface) StoreBountyId(_a0 *ethclient.Client, account types.Account) error {
	ret := _m.Called(_a0, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account) error); ok {
		r0 = rf(_a0, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transfer provides a mock function with given fields: _a0, config, transferInput
func (_m *UtilsCmdInterface) Transfer(_a0 *ethclient.Client, config types.Configurations, transferInput types.TransferInput) (common.Hash, error) {
	ret := _m.Called(_a0, config, transferInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.TransferInput) (common.Hash, error)); ok {
		return rf(_a0, config, transferInput)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.TransferInput) common.Hash); ok {
		r0 = rf(_a0, config, transferInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.TransferInput) error); ok {
		r1 = rf(_a0, config, transferInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockWithdraw provides a mock function with given fields: _a0, txnOpts, stakerId
func (_m *UtilsCmdInterface) UnlockWithdraw(_a0 *ethclient.Client, txnOpts *bind.TransactOpts, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(_a0, txnOpts, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32) (common.Hash, error)); ok {
		return rf(_a0, txnOpts, stakerId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32) common.Hash); ok {
		r0 = rf(_a0, txnOpts, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32) error); ok {
		r1 = rf(_a0, txnOpts, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unstake provides a mock function with given fields: config, _a1, input
func (_m *UtilsCmdInterface) Unstake(config types.Configurations, _a1 *ethclient.Client, input types.UnstakeInput) (common.Hash, error) {
	ret := _m.Called(config, _a1, input)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.UnstakeInput) (common.Hash, error)); ok {
		return rf(config, _a1, input)
	}
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.UnstakeInput) common.Hash); ok {
		r0 = rf(config, _a1, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Configurations, *ethclient.Client, types.UnstakeInput) error); ok {
		r1 = rf(config, _a1, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollection provides a mock function with given fields: _a0, config, collectionInput, collectionId
func (_m *UtilsCmdInterface) UpdateCollection(_a0 *ethclient.Client, config types.Configurations, collectionInput types.CreateCollectionInput, collectionId uint16) (common.Hash, error) {
	ret := _m.Called(_a0, config, collectionInput, collectionId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput, uint16) (common.Hash, error)); ok {
		return rf(_a0, config, collectionInput, collectionId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput, uint16) common.Hash); ok {
		r0 = rf(_a0, config, collectionInput, collectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput, uint16) error); ok {
		r1 = rf(_a0, config, collectionInput, collectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommission provides a mock function with given fields: config, _a1, updateCommissionInput
func (_m *UtilsCmdInterface) UpdateCommission(config types.Configurations, _a1 *ethclient.Client, updateCommissionInput types.UpdateCommissionInput) error {
	ret := _m.Called(config, _a1, updateCommissionInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.UpdateCommissionInput) error); ok {
		r0 = rf(config, _a1, updateCommissionInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJob provides a mock function with given fields: _a0, config, jobInput, jobId
func (_m *UtilsCmdInterface) UpdateJob(_a0 *ethclient.Client, config types.Configurations, jobInput types.CreateJobInput, jobId uint16) (common.Hash, error) {
	ret := _m.Called(_a0, config, jobInput, jobId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateJobInput, uint16) (common.Hash, error)); ok {
		return rf(_a0, config, jobInput, jobId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateJobInput, uint16) common.Hash); ok {
		r0 = rf(_a0, config, jobInput, jobId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateJobInput, uint16) error); ok {
		r1 = rf(_a0, config, jobInput, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: ctx, config, _a2, account, stakerId, httpClient, rogueData, backupNodeActionsToIgnore
func (_m *UtilsCmdInterface) Vote(ctx context.Context, config types.Configurations, _a2 *ethclient.Client, account types.Account, stakerId uint32, httpClient *client.HttpClient, rogueData types.Rogue, backupNodeActionsToIgnore []string) error {
	ret := _m.Called(ctx, config, _a2, account, stakerId, httpClient, rogueData, backupNodeActionsToIgnore)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Configurations, *ethclient.Client, types.Account, uint32, *client.HttpClient, types.Rogue, []string) error); ok {
		r0 = rf(ctx, config, _a2, account, stakerId, httpClient, rogueData, backupNodeActionsToIgnore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForAppropriateState provides a mock function with given fields: _a0, action, states
func (_m *UtilsCmdInterface) WaitForAppropriateState(_a0 *ethclient.Client, action string, states ...int) (uint32, error) {
	_va := make([]interface{}, len(states))
	for _i := range states {
		_va[_i] = states[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, action)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string, ...int) (uint32, error)); ok {
		return rf(_a0, action, states...)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string, ...int) uint32); ok {
		r0 = rf(_a0, action, states...)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, string, ...int) error); ok {
		r1 = rf(_a0, action, states...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitIfCommitState provides a mock function with given fields: _a0, action
func (_m *UtilsCmdInterface) WaitIfCommitState(_a0 *ethclient.Client, action string) (uint32, error) {
	ret := _m.Called(_a0, action)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) (uint32, error)); ok {
		return rf(_a0, action)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) uint32); ok {
		r0 = rf(_a0, action)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, string) error); ok {
		r1 = rf(_a0, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUtilsCmdInterface creates a new instance of UtilsCmdInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUtilsCmdInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UtilsCmdInterface {
	mock := &UtilsCmdInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

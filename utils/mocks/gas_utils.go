// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	types "razor/core/types"
)

// GasUtils is an autogenerated mock type for the GasUtils type
type GasUtils struct {
	mock.Mock
}

// GetGasLimit provides a mock function with given fields: ctx, transactionData, txnOpts
func (_m *GasUtils) GetGasLimit(ctx context.Context, transactionData types.TransactionOptions, txnOpts *bind.TransactOpts) (uint64, error) {
	ret := _m.Called(ctx, transactionData, txnOpts)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.TransactionOptions, *bind.TransactOpts) (uint64, error)); ok {
		return rf(ctx, transactionData, txnOpts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.TransactionOptions, *bind.TransactOpts) uint64); ok {
		r0 = rf(ctx, transactionData, txnOpts)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.TransactionOptions, *bind.TransactOpts) error); ok {
		r1 = rf(ctx, transactionData, txnOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPrice provides a mock function with given fields: client, config
func (_m *GasUtils) GetGasPrice(client *ethclient.Client, config types.Configurations) *big.Int {
	ret := _m.Called(client, config)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations) *big.Int); ok {
		r0 = rf(client, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// IncreaseGasLimitValue provides a mock function with given fields: ctx, client, gasLimit, gasLimitMultiplier
func (_m *GasUtils) IncreaseGasLimitValue(ctx context.Context, client *ethclient.Client, gasLimit uint64, gasLimitMultiplier float32) (uint64, error) {
	ret := _m.Called(ctx, client, gasLimit, gasLimitMultiplier)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ethclient.Client, uint64, float32) (uint64, error)); ok {
		return rf(ctx, client, gasLimit, gasLimitMultiplier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ethclient.Client, uint64, float32) uint64); ok {
		r0 = rf(ctx, client, gasLimit, gasLimitMultiplier)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ethclient.Client, uint64, float32) error); ok {
		r1 = rf(ctx, client, gasLimit, gasLimitMultiplier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGasUtils creates a new instance of GasUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGasUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *GasUtils {
	mock := &GasUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

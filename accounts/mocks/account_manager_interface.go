// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	ecdsa "crypto/ecdsa"

	accounts "github.com/ethereum/go-ethereum/accounts"

	mock "github.com/stretchr/testify/mock"
)

// AccountManagerInterface is an autogenerated mock type for the AccountManagerInterface type
type AccountManagerInterface struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: keystorePath, password
func (_m *AccountManagerInterface) CreateAccount(keystorePath string, password string) accounts.Account {
	ret := _m.Called(keystorePath, password)

	var r0 accounts.Account
	if rf, ok := ret.Get(0).(func(string, string) accounts.Account); ok {
		r0 = rf(keystorePath, password)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	return r0
}

// GetPrivateKey provides a mock function with given fields: address, password
func (_m *AccountManagerInterface) GetPrivateKey(address string, password string) (*ecdsa.PrivateKey, error) {
	ret := _m.Called(address, password)

	var r0 *ecdsa.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*ecdsa.PrivateKey, error)); ok {
		return rf(address, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *ecdsa.PrivateKey); ok {
		r0 = rf(address, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(address, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccount provides a mock function with given fields: passphrase
func (_m *AccountManagerInterface) NewAccount(passphrase string) (accounts.Account, error) {
	ret := _m.Called(passphrase)

	var r0 accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (accounts.Account, error)); ok {
		return rf(passphrase)
	}
	if rf, ok := ret.Get(0).(func(string) accounts.Account); ok {
		r0 = rf(passphrase)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(passphrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignData provides a mock function with given fields: hash, address, password
func (_m *AccountManagerInterface) SignData(hash []byte, address string, password string) ([]byte, error) {
	ret := _m.Called(hash, address, password)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string, string) ([]byte, error)); ok {
		return rf(hash, address, password)
	}
	if rf, ok := ret.Get(0).(func([]byte, string, string) []byte); ok {
		r0 = rf(hash, address, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, string, string) error); ok {
		r1 = rf(hash, address, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountManagerInterface creates a new instance of AccountManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountManagerInterface {
	mock := &AccountManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
